{"version":3,"sources":["serviceWorker.js","context/AppContext.js","components/Message.js","components/Messages.js","actions/actionMessage.js","App.js","reducers/reducerMessages.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","AppContext","createContext","Message","message","ListItem","className","Messages","useContext","messages","map","i","key","actionMessage","type","text","App","setMessages","messagesRedux","useSelector","state","useState","setMessage","socket","useRef","dispatch","useDispatch","useEffect","current","io","connect","disconnect","on","sendMessage","e","preventDefault","emit","Fragment","CssBaseline","Box","color","Card","List","Input","placeholder","value","onChange","target","onKeyPress","Button","variant","onClick","reducerMessages","action","reducers","combineReducers","store","createStore","ReactDOM","render","props","Provider","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+HAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yGChBOC,EAAaC,0B,SCOXC,EANC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACI,kBAACC,EAAA,EAAD,CAAUC,UAAU,WAAWF,I,iBCexBG,EAdE,WAAO,IAAD,EACaC,qBAAWP,GADxB,mBACZQ,EADY,UAGnB,OACI,kBAAC,IAAD,KACKA,EAASC,KAAI,SAACN,EAASO,GACpB,OAAO,yBAAKC,IAAKD,GACb,kBAAC,EAAD,CAASP,QAASA,UCNvBS,EAPO,SAACT,GACnB,MAAO,CACHU,KAAM,UACNC,KAAMX,I,iBC8ECY,EAtEH,WAAO,IAAD,EACkBR,qBAAWP,GAD7B,mBACPQ,EADO,KACGQ,EADH,KAERC,EAAgBC,aAAY,SAAAC,GAAK,OAAIA,EAAMX,YAFnC,EAGgBY,mBAAS,IAHzB,mBAGPjB,EAHO,KAGEkB,EAHF,KAIRC,EAASC,iBAAO,MAChBC,EAAWC,cAEjBC,qBAAU,WAEN,OADAJ,EAAOK,QAAUC,IAAGC,QAAQ,yBACrB,WACHP,EAAOQ,gBAEZ,IAEHJ,qBAAU,WACNJ,EAAOK,QAAQI,GAAG,WAAW,SAAC5B,GAC1Ba,EAAY,GAAD,mBAAKR,GAAL,CAAeL,UAE/B,CAACK,EAAUQ,IAEd,IAAMgB,EAAc,SAACC,GACjBA,EAAEC,iBACc,KAAZ/B,IACAqB,EAASZ,EAAcT,IACvBmB,EAAOK,QAAQQ,KAAK,UAAWhC,GAC/BkB,EAAW,MAcnB,OACI,kBAAC,IAAMe,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAKjC,UAAU,MACXkC,MAAM,WACN,kBAACC,EAAA,EAAD,CAAMnC,UAAU,gBACZ,kBAACoC,EAAA,EAAD,KAII,kBAAC,EAAD,CAAUjC,SAAUS,MAG5B,kBAACuB,EAAA,EAAD,CAAMnC,UAAU,aACZ,kBAACqC,EAAA,EAAD,CAAOrC,UAAU,QACbsC,YAAY,kBACZC,MAAOzC,EACP0C,SA3BA,SAACZ,GACjBZ,EAAWY,EAAEa,OAAOF,QA2BJG,WAxBG,SAACd,GACN,UAAVA,EAAEtB,KACFqB,EAAYC,MAwBJ,kBAACe,EAAA,EAAD,CAAQ3C,UAAU,SACd4C,QAAQ,YACRV,MAAM,UACNW,QAASlB,GAHb,Y,yBC7DLmB,EATS,WAAyB,IAAxBhC,EAAuB,uDAAf,GAAIiC,EAAW,uCAC5C,OAAQA,EAAOvC,MACX,IAAK,UACD,MAAM,GAAN,mBAAWM,GAAX,CAAkBiC,EAAOtC,OAC7B,QACI,OAAOK,ICEJkC,EAJEC,YAAgB,CAC7B9C,SAAU2C,ICSVI,EAAQC,YAAYH,GAExBI,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,mBPbmB,SAACI,GAAW,IAAD,EACFvC,mBAAS,IADP,mBAC3BZ,EAD2B,KACjBQ,EADiB,KAGlC,OAAO,kBAAChB,EAAW4D,SAAZ,CAAqBhB,MAAO,CAACpC,EAAUQ,IACzC2C,EAAME,YOSP,KACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SR8GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpE,a","file":"static/js/main.bbc6f62d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext, useState } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = (props) => {\n    const [messages, setMessages] = useState([]);\n\n    return <AppContext.Provider value={[messages, setMessages]}>\n        {props.children}\n    </AppContext.Provider>\n}\n","import { ListItem } from '@material-ui/core';\nimport React from 'react';\n\nconst Message = ({ message }) => {\n    return (\n        <ListItem className=\"message\">{message}</ListItem>\n    );\n};\n\nexport default Message;\n","import React, { useContext } from 'react';\n\nimport { AppContext } from '../context/AppContext';\nimport Message from './Message';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nconst Messages = () => {\n    const [messages, setMessages] = useContext(AppContext);\n\n    return (\n        <ScrollToBottom>\n            {messages.map((message, i) => {\n                return <div key={i}>\n                    <Message message={message} />\n                </div>\n            })}\n        </ScrollToBottom>\n    );\n};\n\nexport default Messages;\n","const actionMessage = (message) => {\n    return {\n        type: 'MESSAGE',\n        text: message\n    }\n}\n\nexport default actionMessage;\n","import './App.css';\n\nimport { Box, Button, Card, CssBaseline, Input, List } from '@material-ui/core';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AppContext } from './context/AppContext';\nimport Messages from './components/Messages';\nimport { actionMessage } from './actions';\nimport io from \"socket.io-client\";\n\nconst App = () => {\n    const [messages, setMessages] = useContext(AppContext);\n    const messagesRedux = useSelector(state => state.messages);\n    const [message, setMessage] = useState('');\n    const socket = useRef(null);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        socket.current = io.connect('http://localhost:3001');\n        return () => {\n            socket.disconnect();\n        }\n    }, []);\n\n    useEffect(() => {\n        socket.current.on('message', (message) => {\n            setMessages([...messages, message]);\n        });\n    }, [messages, setMessages]);\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        if (message !== '') {\n            dispatch(actionMessage(message));\n            socket.current.emit('message', message);\n            setMessage('');\n        }\n    }\n\n    const handleInput = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const handleEnterKey = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage(e);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Box className=\"App\"\n                color=\"primary\">\n                <Card className=\"cardMessages\">\n                    <List>\n                        {/* NOTE_2020_02_15 (Jose Camporro):\n                            Replacing this with messagesRedux for demo\n                            <Messages messages={messages} /> */}\n                        <Messages messages={messagesRedux} />\n                    </List>\n                </Card>\n                <Card className=\"cardInput\">\n                    <Input className=\"input\"\n                        placeholder=\"Enter a message\"\n                        value={message}\n                        onChange={handleInput}\n                        onKeyPress={handleEnterKey}\n                    />\n                    <Button className=\"button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={sendMessage}\n                    >Send</Button>\n                </Card>\n            </Box>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","const reducerMessages = (state = [], action) => {\n    switch (action.type) {\n        case 'MESSAGE':\n            return [...state, action.text];\n        default:\n            return state;\n    }\n}\n\nexport default reducerMessages;\n","import { combineReducers } from 'redux';\nimport reducerMessages from './reducerMessages';\n\nconst reducers = combineReducers({\n    messages: reducerMessages\n});\n\nexport default reducers;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport { AppProvider } from './context/AppContext';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import actions from './actions';\nimport { createStore } from 'redux';\nimport reducers from './reducers';\n\nlet store = createStore(reducers/*, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/);\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}